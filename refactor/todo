$Id: todo,v 1.88 2007/08/08 14:48:40 dds Exp $

- Provide embedded SQL interface through SQLite.
  See http://www.sqlite.org/cvstrac/wiki?p=VirtualTableMethods

- Eclipse integration

- Add HTTP logging and a timeout on expensive queries.

- Don't report identifiers in function prototypes as unused
  (r mark them as a new attribute function arguments).

- Include MD5 checksums in the download section
- Optimize file_hypertext by not calling check_ec for !isalnum or _
  and in comments.  While at it, mark comments with a different
  color.
- option to color highlighted elements
- option to color comments, put keywords in bold, comments in italics

- In file_process skip over the characters of non-identifier ECs

- Ability to edit queries

- Handle the fact that y.tab.h is not in sync with the %token identifiers
  used in the .y file:
  #pragma process file.y tabfile.h
  tabfile.h is #included, and its id is marked.
  When processing yacc tokens these get macro-expanded with the
  macros of that file ONLY
  Test by obfuscating awk

- Add support for preprocessor predicates (see predicate.h and the
  20060625 blog entry.

- Report unused include files only if the number a given include site
  has been processed equals the number of include files that are unused
  from that site. (maybe this is already the case)

- Include fixincludes.awk and make-spy.pl in the distribution

- Change \n into eol in all DP() to ensure flushed output

- csmake should support yacc

- Best effort identifier substitution for DSL files

Upgrade communication to HTTP/1.1?
See example at http://www.ragestorm.net/tutorial?id=15

Interface to show identifiers shared between two files.

Track global variables in the same way as functions are currently tracked.

Collect maintainability index and oo metrics (see SSAO04.)
Per function/macro:
	Extend (start, end offset / line)
	Fan in (rename called directly)
	Fan out (rename calls directly)
	Number of syntactic contruct (operator, if/else/switch/do/return) and number of unique SO
		For C functions are grammar rules
		For function-like macros look at the tokens after macro definition
	Lines of code
	# of statements
	# of comments
	# parameters
	Cyclomatic complexity (if, do, while, switch) + 1
		Add option for counting #case or #switch
		Add options for counting &&, ||, ? operators
		(This means keeping them in separate fields)
	Halstead complexity
		Maybe not, but count total/distinct operators and operands
	Henry and Kafura structure complexity
		C_p = (fan-in * fan-out)^2
	Henry and Selig information flow metric
		HC_p = C_{ip} * (fan-in * fan-out)^2
		Where C_{ip} is an internal complexity metric, like cyclomatic complexity
	In functions create a heuristic to guess whether the token is native
	or expanded (same fileid and offset >= function's start)


System complexity metrics
Provide an expression-oriented function metric query interface

Pointer analysis
Locate similar / same lines (irrelevant, but useful for refactoring)
See http://en.wikipedia.org/wiki/Karp-Rabin

Calculate Cyclomatic complexity and LOC for each function / macro

MRR04
Precise Call Graphs for C Programs with Function Pointers
Milanova A., Rountev A., Ryder B.   Automated Software Engineering 11(1): 7-26, 2004.

Create a cc-compatible front-end that will accumulate invocation
intructions in a script, or send them to a cscout server,
as an alternative to the current configuration approach.
Need to create front ends to gcc, ld, ar
/usr/src/gnu/usr.bin/ld/ld.c
/usr/src/contrib/gcc/gcc.c

See perforce terms:
http://www.perforce.com/perforce/price.html

Eliminate the dybamic cast by storing Call* pointers
Remove virtual method qualifiers from leaf classes

Remember to update SWILL/Source/SWILL/mime.o in the Unix distributions.

Handle conditional compilation!!!!
	Each conditional compilation statement can be trivially handled
	by creating and processing a parallel universe (we know how
	to do this, cf. 4 BSD kernel processing).  Find ways to do it
	automatically, and efficiently by maintaining merged virtual
	copies of the environment.

Add generalized query language, based on the C preprocessor syntax.

Option to specify leading file path to hide

Refactorings
	- Inline macro
	- Add nth function argument (with default value)
	- Remove nth function argument
	- Change order of function arguments
	- Globally replace identifier in code/strings/comments (select where)
	- Add / replace first block comment

Tag functions appearing on the RHS of expressions (these are likely to
  get called via pointers and thus can't safely have their arguments
  refactored).

Add support for type specifiers:
	_Bool
	_Complex
	_Imaginary
function specifier:
	inline
type qualifier:
	restrict

Find duplicated code
	(See CloSpan and CP-Miner)

Borland configuration file
Solaris compilation
experiment with hashmap performance

ceescape (swill) front end:

Allow interruptions in id queries

lex preprocessor / hooks
	(Partly implemented)
	#pragma sync "filename" offset
	#pragma nosync (default. Input is parsed, but unify is a null op)

C99 extensions

errno monitoring

Convert color to cgi/command-line

Convert the _asm handling into generic handlers for excluding line and
block-based compiler extensions via compiler-specific preprocess-specific preprocessor defs.

Create Java-based front end
Make color conform with the other programs

Add isfunction identifier property
Add ispointer identifier property

Create separate database table with the newlines

Optimize (hash for map)
Create editor


I will take the opportunity to comment on the product. You may scrap
those comments or use them to improve CScout if you like:
1) An installer will make CScout more acceptable to Windows users;
3) I find it curious that entries in "Change history" are undated;
4) I think it would be an an improvement to allow cswc project | cscout
and would like a control to cause a browser to open automatically in
Windows.
5) I had to edit cswc to correct the directory to pick up perl.
7) My comments on the generated html are obviously first impressions:
a) I would like to see context information such as date and command in
"CScout Main Page".
c) I think you should define many of the terms used in the html.
Examples: "Comment characters" - characters in comments; "line
comments"; "block comments"; "lines" - before or after processing \
"Number of" seems redundant.
8) I find the (grammatical) future tense jibs (deliberate nautical pun)
with me in technical documents because it mixes badly with the present
tense. Example: I suggest you use "lists" rather than "will list" in
'The "All files" link will list all the project's files, including
source files, and directly and indirectly included files. You can
use...'
9) I think the html can be optimised so that links which produce no
results are not made or are rendered in a different way. Example: I have
no "Writable .c Files Without Any Statments". (sic in result!)
2) "syntax error" should show current and next symbols.

include command in cswc
