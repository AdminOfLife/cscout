.TH CSCOUT 1 "7 July 2003"
.\" 
.\" (C) Copyright 2003 Diomidis Spinellis.  All rights reserved.
.\" 
.\" This software can be copied, distributed, and used subject to the
.\" terms of the CScout public license available in the CScout documentation 
.\" and online at http://www.spinellis.gr/cscout/doc/license.html
.\" 
.\" THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR IMPLIED
.\" WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF
.\" MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
.\"
.\" $Id: cscout.1,v 1.2 2003/07/07 16:30:06 dds Exp $
.\"
.SH NAME
cscout \- C code analyzer and refactoring browser
.SH SYNOPSIS
\fBcscout\fP 
[\fB\-vE\fP]
[\fB\-p\fP \fIport\fP]
\fIfile\fR
.SH DESCRIPTION
\fICScout\fP is a source code analyzer and refactoring browser for collections
of C programs.
It can process workspaces of multiple projects (we define
a project as a collection of C source files that are linked together)
mapping the complexity introduced by the C preprocessor back into the
original C source code files. 
\fICScout\fP takes advantage of modern hardware
advances (fast processors and large memory capacities) to analyze C
source code beyond the level of detail and accuracy provided by current
compilers and linkers.
The analysis \fICScout\fP performs takes into account
the identifier scopes introduced by the C preprocessor and the C language
proper scopes and namespaces.
.PP
\fICScout\fP as a source code analyzer can:
.IP \(bu 4
annotate source code with hyperlinks to each identifier
.IP \(bu 4
list files that would be affected by changing a specific identifier
.IP \(bu 4
determine whether a given identifier belongs to the application
or to an external library based on the accessibility and location of the
header files that declare or define it
.IP \(bu 4
locate unused identifiers taking into account inter-project 
dependencies
.IP \(bu 4
perform queries for identifiers based on their namespace,
scope, reachability, and regular expressions of their name and the
filename(s) they are found in,
.IP \(bu 4
perform queries for files, based on their metrics, or properties
of the identifiers they contain
.IP \(bu 4
provide accurate metrics on identifiers and files

.PP

More importantly,
\fICScout\fP helps you in refactoring code by identifying dead objects
to remove, and
can automatically perform accurate global \fIrename identifier\fP
refactorings.
\fICScout\fP will automatically rename identifiers
.IP \(bu 4
taking into account the namespace of each identifier: a renaming of
a structure tag, member, or a statement label will not affect variables
with the same name
.IP \(bu 4
respecting the scope of the renamed identifier: a rename can affect
multiple files, or variables within a single block, exactly matching
the semantics the C compiler would enforce
.IP \(bu 4
across multiple projects when the same identifier is defined in
common shared include files
.IP \(bu 4
occuring in macro bodies and \fIparts\fP of other identifiers,
when these are created through the C preprocessor's token concatenation
feature

.PP
This manual page describes the \fICScout\fP invocation and command-line
options.
Details about its web interface, setup, and configuration can be
found in the online hypertext documentation and at the project's home page
http://www.spinellis.gr/cscout.
.PP
.SH OPTIONS
.IP "\fB\-E\fP"
Preprocess the specified file and send the result to the standard
output.
Note that for this option to work correctly, you need to 
also process the workspace definition file with \fB-E\fP.
.IP "\fB\-p\fP \fIport\fP"
The web server will listen for requests on the TCP port number specified.
By default the \fICScout\fP server will listen at port 8081.
The port number must be in the range 1024-32767.
.IP "\fB\-v\fP"
Display  the \fICScout\fP version and copyright information and exit.
.PP
.SH EXAMPLE
Assume you want to analyze three programs in \fC/usr/src/bin\fP.
You first create the following project definition file,
\fCbin.prj\fP.
.PP
.DS
.ft C
.nf
# Some small tools from the src/bin directory
workspace bin {
        ro_prefix "/usr/include"
        cd "/usr/src/bin"
        project cp {
                cd "cp"
                file cp.c utils.c
        }
        project echo {
                cd "echo"
                file echo.c
        }
        project date {
                cd "date"
                file date.c
        }
}
.ft P
.fi
.DE
.PP
Then you compile the workspace file \fCbin.prj\fP
by running the \fICScout\fP workspace compiler \fIcswc\fP on it,
and finally you run \fIcscout\fP on the compiled workspace file.
At that point you are ready to analyze your code and rename its identifiers
through your web browser.
.PP
.DS
.ft C
.nf
$ cswc bin.prj >bin.cs
$ cscout bin.cs
Processing workspace bin
Entering directory /usr/src/bin
Processing project cp
Entering directory cp
Processing file cp.c
Done processing file cp.c
Processing file utils.c
Done processing file utils.c
Exiting directory cp
Done processing project cp
Processing project echo
Entering directory echo
Processing file echo.c
Done processing file echo.c
Exiting directory echo
Done processing project echo
Processing project date
Entering directory date
Processing file date.c
Done processing file date.c
Exiting directory date
Done processing project date
Exiting directory /usr/src/bin
Done processing workspace bin
Post-processing /usr/home/dds/src/cscout/bin.c
[...]
Post-processing /vol/src/bin/cp/cp.c
Post-processing /vol/src/bin/cp/extern.h
Post-processing /vol/src/bin/cp/utils.c
Post-processing /vol/src/bin/date/date.c
Post-processing /vol/src/bin/date/extern.h
Post-processing /vol/src/bin/date/vary.h
Post-processing /vol/src/bin/echo/echo.c
Processing identifiers
100%
We are now ready to serve you at http://localhost:8081
.ft P
.fi
.DE
.PP
.SH "SEE ALSO"
cswc(1)
.SH AUTHOR
(C) Copyright 2003 Diomidis Spinellis.
