<?xml version="1.0" ?>
<notes>


<a href="#NAME">NAME</a><br>
<a href="#SYNOPSIS">SYNOPSIS</a><br>
<a href="#DESCRIPTION">DESCRIPTION</a><br>
<a href="#OPTIONS">OPTIONS</a><br>
<a href="#EXAMPLE">EXAMPLE</a><br>
<a href="#SEE ALSO">SEE ALSO</a><br>
<a href="#AUTHOR">AUTHOR</a><br>

<hr>


<h2>NAME
<a name="NAME"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">cscout -
C code analyzer and refactoring browser</p>

<h2>SYNOPSIS
<a name="SYNOPSIS"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em"><b>cscout</b>
[<b>-bCcErv3</b>] [<b>-d D</b>] [<b>-d
H</b>] [<b>-l</b> <i>log file</i>] [<b>-p</b>
<i>port</i>] [<b>-m</b> <i>specification</i>]
[<b>-o</b> | <b>-s</b> <i>db</i>]
<i>file</i></p>

<h2>DESCRIPTION
<a name="DESCRIPTION"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em"><i>CScout</i>
is a source code analyzer and refactoring browser for
collections of C programs. It can process workspaces of
multiple projects (we define a project as a collection of C
source files that are linked together) mapping the
complexity introduced by the C preprocessor back into the
original C source code files. <i>CScout</i> takes advantage
of modern hardware advances (fast processors and large
memory capacities) to analyze C source code beyond the level
of detail and accuracy provided by current compilers and
linkers. The analysis <i>CScout</i> performs takes into
account the identifier scopes introduced by the C
preprocessor and the C language proper scopes and
namespaces.</p>

<p style="margin-left:11%; margin-top: 1em"><i>CScout</i>
as a source code analyzer can:</p>

<table width="100%" border="0" rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="1%">


<p>&#8226;</p></td>
<td width="5%"></td>
<td width="83%">


<p>annotate source code with hyperlinks to each
identifier</p> </td></tr>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="1%">


<p>&#8226;</p></td>
<td width="5%"></td>
<td width="83%">


<p>list files that would be affected by changing a specific
identifier</p> </td></tr>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="1%">


<p>&#8226;</p></td>
<td width="5%"></td>
<td width="83%">


<p>determine whether a given identifier belongs to the
application or to an external library based on the
accessibility and location of the header files that declare
or define it</p></td></tr>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="1%">


<p>&#8226;</p></td>
<td width="5%"></td>
<td width="83%">


<p>locate unused identifiers taking into account
inter-project dependencies</p></td></tr>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="1%">


<p>&#8226;</p></td>
<td width="5%"></td>
<td width="83%">


<p>perform queries for identifiers based on their
namespace, scope, reachability, and regular expressions of
their name and the filename(s) they are found in,</p></td></tr>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="1%">


<p>&#8226;</p></td>
<td width="5%"></td>
<td width="83%">


<p>perform queries for files, based on their metrics, or
properties of the identifiers they contain</p></td></tr>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="1%">


<p>&#8226;</p></td>
<td width="5%"></td>
<td width="83%">


<p>monitor and report superfluously included header
files</p> </td></tr>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="1%">


<p>&#8226;</p></td>
<td width="5%"></td>
<td width="83%">


<p>provide accurate metrics on identifiers and files</p></td></tr>
</table>

<p style="margin-left:11%; margin-top: 1em">More
importantly, <i>CScout</i> helps you in refactoring code by
identifying dead objects to remove, and can automatically
perform accurate global <i>rename identifier</i>
refactorings. <i>CScout</i> will automatically rename
identifiers</p>

<table width="100%" border="0" rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="1%">


<p style="margin-top: 1em">&#8226;</p></td>
<td width="5%"></td>
<td width="83%">


<p style="margin-top: 1em">taking into account the
namespace of each identifier: a renaming of a structure tag,
member, or a statement label will not affect variables with
the same name</p></td></tr>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="1%">


<p>&#8226;</p></td>
<td width="5%"></td>
<td width="83%">


<p>respecting the scope of the renamed identifier: a rename
can affect multiple files, or variables within a single
block, exactly matching the semantics the C compiler would
enforce</p> </td></tr>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="1%">


<p>&#8226;</p></td>
<td width="5%"></td>
<td width="83%">


<p>across multiple projects when the same identifier is
defined in common shared include files</p></td></tr>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="1%">


<p>&#8226;</p></td>
<td width="5%"></td>
<td width="83%">


<p>occuring in macro bodies and <i>parts</i> of other
identifiers, when these are created through the C
preprocessor&rsquo;s token concatenation feature</p></td></tr>
</table>

<p style="margin-left:11%; margin-top: 1em">This manual
page describes the <i>CScout</i> invocation and command-line
options. Details about its web interface, setup, and
configuration can be found in the online hypertext
documentation and at the project&rsquo;s home page
http://www.spinellis.gr/cscout.</p>

<h2>OPTIONS
<a name="OPTIONS"></a>
</h2>


<table width="100%" border="0" rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="6%">


<p style="margin-top: 1em"><b>-C</b></p></td>
<td width="5%"></td>
<td width="78%">


<p style="margin-top: 1em">Create a <i>ctags</i>-compatible
tags file. Tens of editors and other tools can utilize tags
to help you navigate through the code. In contrast to other
tag generation tools, the file that <i>CScout</i> creates
also includes information about entities dynamically
generated through macros.</p></td></tr>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="6%">


<p><b>-c</b></p></td>
<td width="5%"></td>
<td width="78%">


<p>Exit immediately after processing the specified files.
Useful, when you simply want to check the source code for
errors or when you want to create a <i>tags</i> file.</p></td></tr>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="6%">


<p><b>-d D</b></p></td>
<td width="5%"></td>
<td width="78%">


<p>Display the <tt>#define</tt> directives being processed
on the standard output.</p></td></tr>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="6%">


<p><b>-d H</b></p></td>
<td width="5%"></td>
<td width="78%">


<p>Display the (mainly header) files being included on the
standard output. Each line is prefixed by a number of dots
indicating the depth of the included file stack.</p></td></tr>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="6%">


<p><b>-E</b></p></td>
<td width="5%"></td>
<td width="78%">


<p>Preprocess the specified file and send the result to the
standard output. Note that for this option to work
correctly, you need to also process the workspace definition
file with <b>-E</b>.</p></td></tr>
</table>

<p style="margin-left:11%;"><b>-p</b> <i>port</i></p>

<p style="margin-left:22%;">The web server will listen for
requests on the TCP port number specified. By default the
<i>CScout</i> server will listen at port 8081. The port
number must be in the range 1024-32767.</p>

<p style="margin-left:11%;"><b>-m</b>
<i>specification</i></p>

<p style="margin-left:22%;">Specify the type of identifiers
that <i>CScout</i> will monitor. The identifier attribute
specification is given using the syntax:
Y<b>|</b>L<b>|</b>E<b>|</b>T<b>[:</b><i>attr1</i><b>][:</b><i>attr2</i><b>]</b><i>...
The meaning of the first letter is:</i></p>

<table width="100%" border="0" rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="17%"></td>
<td width="3%">


<p><i>Y:</i></p></td>
<td width="3%"></td>
<td width="62%">


<p>Match any of the specified attributes</p></td>
<td width="15%">
</td></tr>
<tr valign="top" align="left">
<td width="17%"></td>
<td width="3%">


<p>L:</p></td>
<td width="3%"></td>
<td width="62%">


<p>Match all of the specified attributes</p></td>
<td width="15%">
</td></tr>
<tr valign="top" align="left">
<td width="17%"></td>
<td width="3%">


<p>E:</p></td>
<td width="3%"></td>
<td width="62%">


<p>Exclude the specified attributes matched</p></td>
<td width="15%">
</td></tr>
<tr valign="top" align="left">
<td width="17%"></td>
<td width="3%">


<p>T:</p></td>
<td width="3%"></td>
<td width="62%">


<p>Exact match of the specified attributes</p></td>
<td width="15%">
</td></tr>
</table>

<p style="margin-left:11%; margin-top: 1em">Allowable
attribute names and their corresponding meanings are:</p>

<p style="margin-left:17%;">unused:</p>

<p style="margin-left:28%;">Unused identifier</p>

<p style="margin-left:17%;">writable:</p>

<p style="margin-left:28%;">Writable identifier</p>

<table width="100%" border="0" rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="17%"></td>
<td width="6%">


<p>ro:</p></td>
<td width="5%"></td>
<td width="41%">


<p>Read-only identifier</p></td>
<td width="31%">
</td></tr>
<tr valign="top" align="left">
<td width="17%"></td>
<td width="6%">


<p>tag:</p></td>
<td width="5%"></td>
<td width="41%">


<p>Tag for a struct/union/enum</p></td>
<td width="31%">
</td></tr>
</table>

<p style="margin-left:17%;">member:</p>

<p style="margin-left:28%;">Member of a struct/union</p>

<table width="100%" border="0" rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="17%"></td>
<td width="9%">


<p>label:</p></td>
<td width="2%"></td>
<td width="72%">


<p>Label</p></td></tr>
<tr valign="top" align="left">
<td width="17%"></td>
<td width="9%">


<p>obj:</p></td>
<td width="2%"></td>
<td width="72%">


<p>Ordinary identifier (note that enumeration constants and
typedefs belong to the ordinary identifier namespace)</p></td></tr>
<tr valign="top" align="left">
<td width="17%"></td>
<td width="9%">


<p>macro:</p></td>
<td width="2%"></td>
<td width="72%">


<p>Preprocessor macro</p></td></tr>
</table>

<p style="margin-left:17%;">umacro:</p>

<p style="margin-left:28%;">Undefined preprocessor
macro</p>

<p style="margin-left:17%;">macroarg:</p>

<p style="margin-left:28%;">Preprocessor macro argument</p>

<p style="margin-left:17%;">fscope:</p>

<p style="margin-left:28%;">Identifier with file scope</p>

<p style="margin-left:17%;">pscope:</p>

<p style="margin-left:28%;">Identifier with project
scope</p>

<p style="margin-left:17%;">typedef:</p>

<p style="margin-left:28%;">Typedef</p>

<p style="margin-left:17%;">enumconst:</p>

<p style="margin-left:28%;">Enumeration constant</p>

<p style="margin-left:11%; margin-top: 1em">The <i>-m</i>
flag can provide enormous savings on the memory
<i>CScout</i> uses (specify e.g. <i>-m Y:pscope</i> to only
track project-global identifiers), but the processing
<i>CScout</i> performs under this flag is <i>unsound</i>.
The flag should therefore be used only if you are running
short of memory. There are cases where the use of
preprocessor macros can change the attributes of a given
identifier shared between different files. Since the
<i>-m</i> optimization is performed after each single file
is processed, the locations where an identifier is found may
be misrepresented.</p>

<table width="100%" border="0" rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="3%">


<p><b>-r</b></p></td>
<td width="8%"></td>
<td width="78%">


<p>Report on the standard error output warnings about
unused and wrongly scoped identifiers and unused included
files. The error message format is compatible with
<i>gcc</i> and can therefore be automatically processed by
editors that recognize this format.</p></td></tr>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="3%">


<p><b>-v</b></p></td>
<td width="8%"></td>
<td width="78%">


<p>Display the <i>CScout</i> version and copyright
information and exit.</p></td></tr>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="3%">


<p><b>-3</b></p></td>
<td width="8%"></td>
<td width="78%">


<p>Implement support for trigraph characters.</p></td></tr>
<tr valign="top" align="left">
<td width="11%"></td>
<td width="3%">


<p><b>-b</b></p></td>
<td width="8%"></td>
<td width="78%">


<p>Operate in multiuser browse-only mode. In this mode the
web server can concurrently process multiple requests. All
web operations that can affect the server&rsquo;s
functioning (such as setting the various options, renaming
identifiers, refactoring function arguments, selecting a
project, editing a file, or terminating the server) are
prohibited. Call graphs are truncated to 1000 elements
(nodes or edges).</p></td></tr>
</table>

<p style="margin-left:11%;"><b>-s</b> <i>database
dialect</i></p>

<p style="margin-left:22%;">Dump the workspace contents as
an SQL script. Specify <i>help</i> as the database dialect
to obtain a list of supported database back-ends.</p>

<p style="margin-left:11%;"><b>-l</b> <i>log
file</i></p>

<p style="margin-left:22%;">Specify the location of a file
where web requests will be logged.</p>

<table width="100%" border="0" rules="none" frame="void"
       cellspacing="0" cellpadding="0">
<tr valign="top" align="left">
<td width="11%"></td>
<td width="3%">


<p><b>-o</b></p></td>
<td width="8%"></td>
<td width="78%">


<p>Create obfuscated versions of all the writable files of
the workspace.</p></td></tr>
</table>

<h2>EXAMPLE
<a name="EXAMPLE"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">Assume you want
to analyze three programs in <tt>/usr/src/bin</tt>. You
first create the following project definition file,
<tt>bin.prj</tt>.</p>

<pre style="margin-left:11%; margin-top: 1em"># Some small tools from the src/bin directory
workspace bin {
        ro_prefix "/usr/include"
        cd "/usr/src/bin"
        project cp {
                cd "cp"
                file cp.c utils.c
        }
        project echo {
                cd "echo"
                file echo.c
        }
        project date {
                cd "date"
                file date.c
        }
}</pre>


<p style="margin-left:11%; margin-top: 1em">Then you
compile the workspace file <tt>bin.prj</tt> by running the
<i>CScout</i> workspace compiler <i>cswc</i> on it, and
finally you run <i>cscout</i> on the compiled workspace
file. At that point you are ready to analyze your code and
rename its identifiers through your web browser.</p>

<pre style="margin-left:11%; margin-top: 1em">$ cswc bin.prj &gt;bin.cs
$ cscout bin.cs
Processing workspace bin
Entering directory /usr/src/bin
Processing project cp
Entering directory cp
Processing file cp.c
Done processing file cp.c
Processing file utils.c
Done processing file utils.c
Exiting directory cp
Done processing project cp
Processing project echo
Entering directory echo
Processing file echo.c
Done processing file echo.c
Exiting directory echo
Done processing project echo
Processing project date
Entering directory date
Processing file date.c
Done processing file date.c
Exiting directory date
Done processing project date
Exiting directory /usr/src/bin
Done processing workspace bin
Post-processing /usr/home/dds/src/cscout/bin.c
[...]
Post-processing /vol/src/bin/cp/cp.c
Post-processing /vol/src/bin/cp/extern.h
Post-processing /vol/src/bin/cp/utils.c
Post-processing /vol/src/bin/date/date.c
Post-processing /vol/src/bin/date/extern.h
Post-processing /vol/src/bin/date/vary.h
Post-processing /vol/src/bin/echo/echo.c
Processing identifiers
100%
We are now ready to serve you at http://localhost:8081</pre>


<h2>SEE ALSO
<a name="SEE ALSO"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">cswc(1)</p>

<h2>AUTHOR
<a name="AUTHOR"></a>
</h2>


<p style="margin-left:11%; margin-top: 1em">(c) Copyright
2003-2015 Diomidis Spinellis.</p>
<hr>
</notes>
